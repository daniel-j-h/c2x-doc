######################################################################
#
# CONVERTER
#
######################################################################

# Known Parsers detected by file extension.
# Other extensions will be passed to OsmXmlParser.

osmParser.pbf = de.cm.osm2po.plugins.OsmPbfParser
osmParser.o5m = de.cm.osm2po.plugins.OsmO5mParser
osmParser.o5m.gz = de.cm.osm2po.plugins.OsmO5mGzParser
osmParser.osm.bz2 = de.cm.osm2po.plugins.OsmXmlBz2Parser

# Set Caching behavior for tiles.
# There are two different mechanisms in osm2po to handle
# large files which tend to bomb our memory. The uncompressed
# mode tiles first and the compressed mode runs tiling as a
# postprocess after caching references from ways.
# Tiling usually needs a buffer in order to resolve
# ways which cross tiles. The default value is 0.1 degrees.
# The default for a tile is 1x1 degrees.
# This is a very pessimistic setting, good for small areas
# but bad for countries or continents. For the latter values
# like 5x5 or even 10x10 should be used.
# But running without tiling is possible, too.
# The tileSize Parameter accepts three optional values.
# They may appear in any order.
# 1) Size
# 2) Buffer
# 3) Additional switches as a sequence of lower case letters.
#    Currently the only known switch is "c" (compressed mode).
# Examples:
# tileSize = 5x5 (Run with tileSize 5x5)
# tileSize = x, c (Run without tiling and run compression before)
# tileSize = 10x10, 0.5, c (Compress 10x10 with a buffer of 0.5)

#tileSize = 1x1,0.1  

# Osm2po's Tilemanager must be able to cache lots of
# tiles. Therefore it has to estimate the remaining ram.
# If osm2po runs into an OutOfMemoryError this may
# be due to a wrong System Memory usage assumption.
# This mostly happens under 64 Bit Java.
# If you see lots of warnings like OutOfMemoryError
# increase this at least to the amount where the last
# operation failed. Default is 32 (MegaByte)

#reservedXmx = 512

# Skip tiles that have less than this number of
# nodes (faster). Default is 0.

tileThreshold = 100

# Usually the caching of many tiles is the fastest approach.
# In some cases, mostly if these tiles contain hardly any
# nodes, this optimization may cause the opposite effect.
# In this case it might be faster to reread a way-file 
# than caching as many tiles as possible. 

maxTilesPerLoop = 100

# Last chance to customize some things before finally writing them.

#joinInterceptor = de.cm.osm2po.converter.DefaultJoinInterceptor

######################################################################
#
# DEFAULT TAG RESOLVER
#
######################################################################

# A TagResolver implementation translates OSM-tags into a more
# useful set of information like name, speed, usage, ..., etc.
# If you need a special behavior, which cannot be handled by this
# default mechanism, feel free to implement your own TagResolver.
# The default TagResolver for ways uses two bit-fields (allowed and denied)
# Each parsed osm-tag may modify flags in one of these fields
# either by allowing bits (or-op.) or by denying bits (deferred inverse-and-op.).
# The default implementation is 'de.cm.osm2po.converter.DefaultWayTagResolver'
# Node- and RelationTagResolvers are for future use.

#wayTagResolver.class = com.to.another.package.YourWayTagResolver
#nodeTagResolver.class = com.to.another.package.YourNodeTagResolver
#relationTagResolver.class = com.to.another.package.YourRelationTagResolver

# Properties of the DefaultWayTagResolver use this prefix.

#wayTagResolver.prefix = wtr

# Custom flags with ascending binary values 1, 2, 4, 8 ...
# You may define up to 32 Flags (Bits).

wtr.flagList = car, bike, foot, rail, ferry
 
# final decision; only allow ways with these flags

wtr.finalMask = car

# very special hint for level_crossing modification

wtr.shuttleTrainMask = rail|car

# Main-Tag definitions. Params 1-4:
# 1) concurrent order
# 2) class (1-127)
# 3) default speed in kmh
# 4) allowed transportation type (optional) - since v4.5.30

wtr.tag.highway.motorway =       1, 11, 537, car
wtr.tag.highway.motorway_link =  1, 12, 537,  car
wtr.tag.highway.trunk =          1, 13, 537,  car
wtr.tag.highway.trunk_link =     1, 14, 537,  car
wtr.tag.highway.primary =        1, 15, 247,  car
wtr.tag.highway.primary_link =   1, 16, 247,  car
wtr.tag.highway.secondary =      1, 21, 127,  car
wtr.tag.highway.secondary_link = 1, 22, 127,  car
wtr.tag.highway.tertiary =       1, 31, 75,  car|bike
wtr.tag.highway.residential =    1, 32, 50,  car|bike
wtr.tag.highway.road =           1, 41, 30,  car|bike
wtr.tag.highway.unclassified =   1, 42, 30,  car|bike
#wtr.tag.highway.service =       1, 51, 5,   car|bike
#wtr.tag.highway.living_street = 1, 63, 7,   car|bike|foot   
#wtr.tag.highway.pedestrian =    1, 62, 5,   bike|foot
#wtr.tag.highway.track =         1, 71, 10,  bike|foot
#wtr.tag.highway.path =          1, 72, 10,  bike|foot
#wtr.tag.highway.cycleway =      1, 81, 15,  bike
#wtr.tag.highway.footway =       1, 91, 5,   foot
#wtr.tag.highway.steps =         1, 92, 5,   foot
wtr.tag.route.ferry =            2, 01, 10,  ferry
wtr.tag.route.shuttle_train =    2, 02, 50,  rail|car
wtr.tag.railway.rail =           3, 03, 50,  rail

# Other tags may overwrite the transportion type definition above.
# They allow or explicitly deny things, so the finalMask can
# catch or drop a set of tags at the end.
# Tags without explicit values like wtr.deny.motorcar act like
# an else-part and will be used if no other tag=value matches.
# Since Version 4.5.30 you may substitute keys. e.g.
# 'wtr.deny.motor[_vehicle|car]' will be replaced by
# 'wtr.deny.motor_vehicle' and 'wtr.deny.motorcar'.
# Nested expressions like ..[...[...]].. are not supported.

wtr.allow.motor[car|_vehicle].[yes|destination] = car
wtr.allow.[bicycle|cycleway] = bike

wtr.deny.tracktype.grade[4|5] = car|bike
wtr.deny.access.no = car|bike|foot|rail|ferry
wtr.deny.vehicle.no = car|bike
wtr.deny.motor[_vehicle|car] = car
wtr.deny.[bicycle|cycleway].no = bike
wtr.deny.foot.no = foot

# If an OSM-maxSpeed-tag/value exists, it overrides the default
# speeds above. Set it to false in order to maintain your settings.

#wtr.maxSpeedOverrides = false

######################################################################
#
# LOGGER
#
######################################################################

# This is the LogLevel for global (log.level) and
# console (log.console.level) and file logging.
# Possible values are
# debug, progress, warn, info, error, fatal.
# Default for all is info
# In addition you can set another ConsoleWriter
# Default is Log2poConsoleWriter

log.level = debug
log.file.level = debug
log.console.level = progress
#log.console.writer.class = de.cm.osm2po.logging.Log2poConsoleWriter
#log.console.writer.class = de.cm.osm2po.logging.LogJclWriter

# Redirecting of StandardOut (console)
# Possible values are out, err or null (quiet).
# Default (of course) is out.
# This is a nice feature which let's you
# link osm2po to an input pipe. See: postp.pipeOut.

#log.console.to = err


######################################################################
#
# POSTPROCESSORS
#
######################################################################

postp.0.class = de.cm.osm2po.converter.PgRoutingWriter
#postp.0.writeMultiLineStrings = true
#postp.1.class = de.cm.osm2po.plugins.PgVertexWriter

# postprocessors usually create output files.
# Use this paraemter in order to print to stdout (console)

#postp.pipeOut = true
 
# Tricky:
# If you want this program to be one link in a transformation chain
# e.g. curl | bzcat | osm2po | psql
# you must set both, log.console.to=err and postp.pipeOut=true.
# It is recommended to run curl, bzcat and psql in silent/quiet mode. 
# Example (one line):
# curl -s -L http://download.geofabrik.de/osm/europe/germany/hamburg.osm.bz2 |
# bzcat -c | java -jar osm2po-core-4.jar prefix=hh postp.pipeOut=true log.console.to=err |
# psql -q -U myuser -s -d mydb


######################################################################
#
# OSM2PO-Routing
#
######################################################################

# This pluggable class translates other properties like kmh or flags
# and allows to mix in external data.

#graph.build.interceptor.class = de.cm.osm2po.converter.DefaultGraphBuildInterceptor

# Each Segment will be split into a forward and a reverse edge.
# Reverse edges which are derived from one-way-segments are
# written by default. This is useful for bike routing but
# not for car routing and blows up your graph size in memory.
# To exclude these "WrongWays" set the following parameter to true

#graph.build.excludeWrongWays = true

# These are some settings for the caching and lookup behavior.
# In order to speed up geometry lookups you may want to set
# graph.support.segments=true. This disables HardDisk-Lookups but needs
# much more RAM (Xmx). Setting graph.support.edgeflags=true is useful
# for Soap/GeoJson-Requests. If not set, you will not receive street type infos.
# Setting graph.support.reverse=true creates an additional Reverse-Graph.
# graph.support.raster[.e|.v] is another RAM-wasting addition, which creates
# a rastered index for vertices (v) or edges (e) or if '.e' and '.v'
# are missing, for both. 

#graph.support.segments = true
#graph.support.edgeflags = true
#graph.support.reverse = true
#graph.support.raster = true
#graph.support.raster.e = true
#graph.support.raster.v = true
#graph.support.barriers = true

# These are osm2po's router implementations.
# They are based on modified Dijkstra/AStar algorithms.
# Routers with a '2' at the end are able to start and
# finish at any point, not only at links.

#router.0.class=de.cm.osm2po.routing.DefaultRouter
#router.1.class=de.cm.osm2po.routing.SimpleRouter
#router.2.class=de.cm.osm2po.routing.EdgeRouter
#router.3.class=de.cm.osm2po.routing.BidiRouter
#router.4.class=de.cm.osm2po.routing.ReversibleRouter
#router.5.class=de.cm.osm2po.routing.PoiRouter
#router.6.class=de.cm.osm2po.routing.DefaultRouter2
#router.7.class=de.cm.osm2po.routing.EdgeRouter2

# Service Settings

#service.domain = localhost
#service.port = 8888


######################################################################
#
# OSM2PO-Samples (see Plugins Sources)
#
######################################################################

# TrafficSignals-Sample

#nodeClazz.1.name=Traffic Signals
#nodeTagResolver.class=de.cm.osm2po.samples.TrafficSignalsNodeTagResolver
#router.1.class=de.cm.osm2po.samples.TrafficSignalsRouter


